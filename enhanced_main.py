#!/usr/bin/env python3
"""
Enhanced FLUX API Image Generator - Main Entry Point
–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º –≤–∏–±–æ—Ä–æ–º —Å—Ç–∏–ª—ñ–≤
"""

import sys
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from flux_generator import EnhancedFluxGenerator

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    print("\nüé® Enhanced FLUX API Image Generator")
    print("=" * 50)
    print("1. –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ")
    print("2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –æ–¥–Ω–∏–º —Å—Ç–∏–ª–µ–º")
    print("3. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤")
    print("4. –ö–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç")
    print("5. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    print("6. –í–∏—Ö—ñ–¥")
    print("=" * 50)

def show_styles(generator):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ"""
    print("\nüé® –î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ:")
    generator.list_available_styles()
    print("\nüìê –î–æ—Å—Ç—É–ø–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏:")
    generator.list_available_aspects()
    print("\n‚≠ê –î–æ—Å—Ç—É–ø–Ω—ñ —è–∫–æ—Å—Ç—ñ:")
    generator.list_available_qualities()

def single_style_generation(generator):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –æ–¥–Ω–∏–º —Å—Ç–∏–ª–µ–º"""
    print("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –æ–¥–Ω–∏–º —Å—Ç–∏–ª–µ–º")
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ
    generator.list_available_styles()
    
    # –í–∏–±—ñ—Ä —Å—Ç–∏–ª—é
    style = input("\n–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å (–∞–±–æ Enter –¥–ª—è realistic): ").strip().lower()
    if not style:
        style = "realistic"
    
    try:
        generator.set_style(style)
    except ValueError as e:
        print(f"‚ùå {e}")
        return
    
    # –í–∏–±—ñ—Ä –∞—Å–ø–µ–∫—Ç—É
    generator.list_available_aspects()
    aspect = input("–í–∏–±–µ—Ä—ñ—Ç—å –∞—Å–ø–µ–∫—Ç (–∞–±–æ Enter –¥–ª—è portrait): ").strip().lower()
    if not aspect:
        aspect = "portrait"
    
    try:
        generator.set_aspect_ratio(aspect)
    except ValueError as e:
        print(f"‚ùå {e}")
        return
    
    # –í–∏–±—ñ—Ä —è–∫–æ—Å—Ç—ñ
    generator.list_available_qualities()
    quality = input("–í–∏–±–µ—Ä—ñ—Ç—å —è–∫—ñ—Å—Ç—å (–∞–±–æ Enter –¥–ª—è standard): ").strip().lower()
    if not quality:
        quality = "standard"
    
    try:
        generator.set_quality(quality)
    except ValueError as e:
        print(f"‚ùå {e}")
        return
    
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å
    try:
        count = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å (–∞–±–æ Enter –¥–ª—è 3): ") or "3")
    except ValueError:
        count = 3
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó...")
    generator.generate_images(count)

def style_comparison(generator):
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤"""
    print("\nüîÑ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤")
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ
    generator.list_available_styles()
    
    # –í–∏–±—ñ—Ä —Å—Ç–∏–ª—ñ–≤
    styles_input = input("\n–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É (–∞–±–æ Enter –¥–ª—è realistic,cinematic,artistic): ").strip()
    if not styles_input:
        styles = ["realistic", "cinematic", "artistic"]
    else:
        styles = [s.strip().lower() for s in styles_input.split(",")]
    
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ —Å—Ç–∏–ª—å
    try:
        count_per_style = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ —Å—Ç–∏–ª—å (–∞–±–æ Enter –¥–ª—è 2): ") or "2")
    except ValueError:
        count_per_style = 2
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤...")
    generator.generate_style_comparison(styles, count_per_style)

def custom_prompt_generation(generator):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    print("\n‚úçÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç")
    
    # –í–∏–±—ñ—Ä —Å—Ç–∏–ª—é —è–∫ –±–∞–∑–∏
    generator.list_available_styles()
    style = input("\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∑–æ–≤–∏–π —Å—Ç–∏–ª—å (–∞–±–æ Enter –¥–ª—è realistic): ").strip().lower()
    if not style:
        style = "realistic"
    
    try:
        generator.set_style(style)
    except ValueError as e:
        print(f"‚ùå {e}")
        return
    
    # –ö–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
    custom_prompt = input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç: ").strip()
    if not custom_prompt:
        print("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
        return
    
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å
    try:
        count = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å (–∞–±–æ Enter –¥–ª—è 2): ") or "2")
    except ValueError:
        count = 2
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º...")
    generator.generate_images(count, custom_prompt)

def settings_menu(generator):
    """–ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    while True:
        print("\n‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        print("1. –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∏–ª—å")
        print("2. –ó–º—ñ–Ω–∏—Ç–∏ –∞—Å–ø–µ–∫—Ç")
        print("3. –ó–º—ñ–Ω–∏—Ç–∏ —è–∫—ñ—Å—Ç—å")
        print("4. –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        print("5. –ù–∞–∑–∞–¥")
        
        choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ").strip()
        
        if choice == "1":
            generator.list_available_styles()
            style = input("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∏–ª—å: ").strip().lower()
            try:
                generator.set_style(style)
                print(f"‚úÖ –°—Ç–∏–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {style}")
            except ValueError as e:
                print(f"‚ùå {e}")
        
        elif choice == "2":
            generator.list_available_aspects()
            aspect = input("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –∞—Å–ø–µ–∫—Ç: ").strip().lower()
            try:
                generator.set_aspect_ratio(aspect)
                print(f"‚úÖ –ê—Å–ø–µ–∫—Ç –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {aspect}")
            except ValueError as e:
                print(f"‚ùå {e}")
        
        elif choice == "3":
            generator.list_available_qualities()
            quality = input("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —è–∫—ñ—Å—Ç—å: ").strip().lower()
            try:
                generator.set_quality(quality)
                print(f"‚úÖ –Ø–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {quality}")
            except ValueError as e:
                print(f"‚ùå {e}")
        
        elif choice == "4":
            config = generator.get_current_config()
            print(f"\nüìã –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
            print(f"üé® –°—Ç–∏–ª—å: {config['style_name']}")
            print(f"üìê –ê—Å–ø–µ–∫—Ç: {config['aspect_ratio']}")
            print(f"‚≠ê –Ø–∫—ñ—Å—Ç—å: {generator.current_quality}")
            print(f"üìù –ü—Ä–æ–º–ø—Ç: {config['prompt'][:100]}...")
        
        elif choice == "5":
            break
        
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ Enhanced FLUX API Image Generator - Starting...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        input_image = Path("data/input/character.jpg")
        print(f"üîç Checking input image: {input_image}")
        
        if not input_image.exists():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª data/input/character.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print("‚úÖ Input image found")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        print("üîß Creating enhanced generator...")
        generator = EnhancedFluxGenerator()
        print("‚úÖ Enhanced generator created successfully")
        
        # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
        while True:
            show_menu()
            choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-6): ").strip()
            
            if choice == "1":
                show_styles(generator)
            
            elif choice == "2":
                single_style_generation(generator)
            
            elif choice == "3":
                style_comparison(generator)
            
            elif choice == "4":
                custom_prompt_generation(generator)
            
            elif choice == "5":
                settings_menu(generator)
            
            elif choice == "6":
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
        
    except ValueError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 