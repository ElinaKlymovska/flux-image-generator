#!/usr/bin/env python3
"""
Prompt Tester for FLUX API Image Generator
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
"""

import os
import time
import json
import requests
from pathlib import Path
from typing import Dict, Any, Optional, List, Tuple
from dotenv import load_dotenv
import base64
from datetime import datetime
from .prompts import PromptConfig

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

class PromptTester:
    """–ö–ª–∞—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è–º"""
    
    def __init__(self):
        self.api_key = os.getenv('BFL_API_KEY')
        if not self.api_key:
            raise ValueError("BFL_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        
        # Remove quotes if present
        self.api_key = self.api_key.strip('"\'')
        
        self.base_url = "https://api.bfl.ai/v1/flux-kontext-pro"
        self.headers = {
            "x-key": self.api_key,
            "Content-Type": "application/json"
        }
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç—ñ–≤
        self.datasets_dir = Path("data/output/datasets")
        self.datasets_dir.mkdir(parents=True, exist_ok=True)
        
        # 15 —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        self.test_prompts = [
            {
                "name": "ultra_realistic",
                "prompt": "ultra-realistic portrait of a woman, soft natural lighting, neutral background, high quality, detailed facial features, professional photography, 8k resolution",
                "description": "–£–ª—å—Ç—Ä–∞—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç"
            },
            {
                "name": "cinematic_dramatic",
                "prompt": "cinematic portrait of a woman, dramatic lighting, shallow depth of field, film grain, professional cinematography, moody atmosphere, high contrast, golden hour",
                "description": "–ö—ñ–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –¥—Ä–∞–º–∞—Ç–∏—á–Ω–∏–π"
            },
            {
                "name": "artistic_painterly",
                "prompt": "artistic portrait of a woman, painterly style, soft brushstrokes, artistic lighting, creative composition, masterpiece quality, fine art photography, oil painting effect",
                "description": "–•—É–¥–æ–∂–Ω—ñ–π –∂–∏–≤–æ–ø–∏—Å–Ω–∏–π"
            },
            {
                "name": "fashion_editorial",
                "prompt": "fashion portrait of a woman, studio lighting, professional makeup, elegant pose, high fashion photography, magazine quality, sophisticated style, editorial look",
                "description": "–ú–æ–¥–Ω–∏–π —Ä–µ–¥–∞–∫—Ü—ñ–π–Ω–∏–π"
            },
            {
                "name": "vintage_retro",
                "prompt": "vintage portrait of a woman, retro style, film photography, warm tones, nostalgic atmosphere, classic beauty, timeless elegance, 1950s aesthetic",
                "description": "–í—ñ–Ω—Ç–∞–∂–Ω–∏–π —Ä–µ—Ç—Ä–æ"
            },
            {
                "name": "modern_minimalist",
                "prompt": "modern portrait of a woman, contemporary style, clean composition, minimalist background, sharp details, professional headshot quality, urban aesthetic",
                "description": "–°—É—á–∞—Å–Ω–∏–π –º—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π"
            },
            {
                "name": "dramatic_emotional",
                "prompt": "dramatic portrait of a woman, intense lighting, strong shadows, emotional expression, powerful composition, artistic photography, chiaroscuro lighting",
                "description": "–î—Ä–∞–º–∞—Ç–∏—á–Ω–∏–π –µ–º–æ—Ü—ñ–π–Ω–∏–π"
            },
            {
                "name": "soft_dreamy",
                "prompt": "soft dreamy portrait of a woman, gentle lighting, soft focus, ethereal atmosphere, romantic mood, delicate beauty, pastel tones, bokeh background",
                "description": "–ú'—è–∫–∏–π –º—Ä—ñ–π–ª–∏–≤–∏–π"
            },
            {
                "name": "professional_corporate",
                "prompt": "professional corporate portrait of a woman, business attire, clean background, confident expression, executive headshot, modern office setting, professional lighting",
                "description": "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π"
            },
            {
                "name": "creative_artistic",
                "prompt": "creative artistic portrait of a woman, abstract background, artistic composition, creative lighting, modern art style, contemporary photography, experimental",
                "description": "–¢–≤–æ—Ä—á–∏–π —Ö—É–¥–æ–∂–Ω—ñ–π"
            },
            {
                "name": "elegant_sophisticated",
                "prompt": "elegant sophisticated portrait of a woman, luxury setting, refined beauty, high-end fashion, premium quality, sophisticated lighting, exclusive atmosphere",
                "description": "–ï–ª–µ–≥–∞–Ω—Ç–Ω–∏–π –≤–∏—à—É–∫–∞–Ω–∏–π"
            },
            {
                "name": "natural_outdoor",
                "prompt": "natural outdoor portrait of a woman, natural lighting, outdoor setting, environmental portrait, nature background, organic beauty, environmental photography",
                "description": "–ü—Ä–∏—Ä–æ–¥–Ω–∏–π –∑–æ–≤–Ω—ñ—à–Ω—ñ–π"
            },
            {
                "name": "studio_professional",
                "prompt": "studio professional portrait of a woman, controlled lighting, studio background, professional equipment, commercial photography, advertising quality",
                "description": "–°—Ç—É–¥—ñ–π–Ω–∏–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π"
            },
            {
                "name": "expressive_character",
                "prompt": "expressive character portrait of a woman, strong personality, character study, emotional depth, psychological portrait, human interest, documentary style",
                "description": "–ï–∫—Å–ø—Ä–µ—Å–∏–≤–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∏–π"
            },
            {
                "name": "contemporary_urban",
                "prompt": "contemporary urban portrait of a woman, city background, modern lifestyle, urban aesthetic, street photography style, contemporary culture, metropolitan",
                "description": "–°—É—á–∞—Å–Ω–∏–π –º—ñ—Å—å–∫–∏–π"
            }
        ]
        
        # –ö—É—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
        self.rotation_angles = [0, 10, 30, 45, 60, 90, 180]
        
    def encode_image(self, image_path: str) -> str:
        """–ö–æ–¥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ base64"""
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    
    def create_generation_request(self, prompt: str, seed: int, rotation: int = 0) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è–º"""
        image_data = self.encode_image("data/input/character.jpg")
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ –ø—Ä–æ–º–ø—Ç—É
        rotation_prompt = ""
        if rotation > 0:
            rotation_prompt = f", rotated {rotation} degrees, different angle view"
        
        full_prompt = prompt + rotation_prompt
        
        return {
            "prompt": full_prompt,
            "input_image": image_data,
            "seed": seed,
            "aspect_ratio": "2:3",
            "output_format": "jpeg",
            "prompt_upsampling": True,
            "safety_tolerance": 2
        }
    
    def submit_generation(self, request_data: Dict[str, Any]) -> Optional[str]:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é"""
        try:
            response = requests.post(
                self.base_url,
                headers=self.headers,
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('polling_url')
            elif response.status_code == 429:
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ 429: –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è...")
                time.sleep(60)
                return None
            elif response.status_code == 500:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ 500: –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                return None
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP {response.status_code}: {response.text}")
                return None
                
        except requests.exceptions.Timeout:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É")
            return None
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}")
            return None
    
    def poll_generation_status(self, polling_url: str) -> Optional[Dict[str, Any]]:
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"""
        max_attempts = 60
        attempt = 0
        
        while attempt < max_attempts:
            try:
                response = requests.get(polling_url, timeout=10)
                
                if response.status_code == 200:
                    result = response.json()
                    status = result.get('status')
                    
                    if status == 'completed' or status == 'Ready':
                        return result
                    elif status == 'failed':
                        print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ–≤–¥–∞–ª–∞: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
                        return None
                    elif status == 'processing' or status == 'Pending':
                        print(f"üîÑ –û–±—Ä–æ–±–∫–∞... (—Å–ø—Ä–æ–±–∞ {attempt + 1}/{max_attempts})")
                        time.sleep(5)
                    else:
                        print(f"‚ÑπÔ∏è  –°—Ç–∞—Ç—É—Å: {status}")
                        time.sleep(5)
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É")
                    time.sleep(5)
                    
            except requests.exceptions.Timeout:
                print("‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É")
                time.sleep(5)
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
                time.sleep(5)
            
            attempt += 1
        
        print("‚è∞ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
        return None
    
    def download_image(self, image_url: str, file_path: Path) -> bool:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        try:
            response = requests.get(image_url, timeout=30)
            
            if response.status_code == 200:
                with open(file_path, 'wb') as f:
                    f.write(response.content)
                print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {file_path.name}")
                return True
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: HTTP {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
            return False
    
    def create_dataset_folder(self, prompt_name: str) -> Path:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç—É"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        dataset_name = f"{prompt_name}_{timestamp}"
        dataset_path = self.datasets_dir / dataset_name
        dataset_path.mkdir(exist_ok=True)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
        metadata = {
            "prompt_name": prompt_name,
            "created_at": datetime.now().isoformat(),
            "total_images": len(self.rotation_angles),
            "rotation_angles": self.rotation_angles,
            "prompt_text": next(p["prompt"] for p in self.test_prompts if p["name"] == prompt_name)
        }
        
        with open(dataset_path / "metadata.json", "w", encoding="utf-8") as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        return dataset_path
    
    def generate_single_image(self, prompt: Dict[str, str], rotation: int, seed: int, dataset_path: Path) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        print(f"\nüé® –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è: {prompt['name']} (–æ–±–µ—Ä—Ç–∞–Ω–Ω—è: {rotation}¬∞)")
        print(f"üìù –û–ø–∏—Å: {prompt['description']}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        request_data = self.create_generation_request(prompt["prompt"], seed, rotation)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É
        polling_url = self.submit_generation(request_data)
        if not polling_url:
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É")
            return False
        
        # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        result = self.poll_generation_status(polling_url)
        if not result:
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É")
            return False
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        result_data = result.get('result', {})
        image_url = result_data.get('sample')
        if image_url:
            filename = f"{prompt['name']}_rotation{rotation:03d}_seed{seed}.jpg"
            file_path = dataset_path / filename
            return self.download_image(image_url, file_path)
        else:
            print(f"‚ùå URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ")
            return False
    
    def test_prompt(self, prompt: Dict[str, str]) -> None:
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É –∑ —É—Å—ñ–º–∞ –∫—É—Ç–∞–º–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è"""
        print(f"\nüöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É: {prompt['name']}")
        print(f"üìù –û–ø–∏—Å: {prompt['description']}")
        print(f"üîÑ –ö—É—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è: {self.rotation_angles}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç—É
        dataset_path = self.create_dataset_folder(prompt["name"])
        print(f"üìÅ –î–∞—Ç–∞—Å–µ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {dataset_path}")
        
        successful_generations = 0
        base_seed = 5000 + hash(prompt["name"]) % 1000  # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π seed –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É
        
        for i, rotation in enumerate(self.rotation_angles):
            seed = base_seed + i
            
            if self.generate_single_image(prompt, rotation, seed, dataset_path):
                successful_generations += 1
            
            # –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            if i < len(self.rotation_angles) - 1:
                time.sleep(3)
        
        print(f"\nüéâ === –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {successful_generations}/{len(self.rotation_angles)}")
        print(f"üìÅ –î–∞—Ç–∞—Å–µ—Ç: {dataset_path}")
    
    def test_all_prompts(self) -> None:
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        print(f"üß™ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {len(self.test_prompts)} –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print(f"üîÑ –ö–æ–∂–µ–Ω –ø—Ä–æ–º–ø—Ç –±—É–¥–µ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–∏–π –∑ {len(self.rotation_angles)} –∫—É—Ç–∞–º–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è")
        print(f"üìä –í—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(self.test_prompts) * len(self.rotation_angles)}")
        
        total_successful = 0
        total_attempted = 0
        
        for i, prompt in enumerate(self.test_prompts):
            print(f"\n{'='*60}")
            print(f"üìã –ü—Ä–æ–º–ø—Ç {i+1}/{len(self.test_prompts)}: {prompt['name']}")
            print(f"{'='*60}")
            
            self.test_prompt(prompt)
            
            # –ü–∞—É–∑–∞ –º—ñ–∂ –ø—Ä–æ–º–ø—Ç–∞–º–∏
            if i < len(self.test_prompts) - 1:
                print(f"\n‚è≥ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º...")
                time.sleep(10)
        
        print(f"\nüéâ === –í–°–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û ===")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {self.datasets_dir}")
    
    def list_prompts(self) -> None:
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        print("üìù –î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
        for i, prompt in enumerate(self.test_prompts, 1):
            print(f"{i:2d}. {prompt['name']}: {prompt['description']}")
    
    def list_rotations(self) -> None:
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è –∫—É—Ç—ñ–≤ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è"""
        print("üîÑ –ö—É—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è:")
        for angle in self.rotation_angles:
            print(f"  ‚Ä¢ {angle}¬∞")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if not Path("data/input/character.jpg").exists():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª data/input/character.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–µ—Ä–∞
        tester = PromptTester()
        
        # –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        print("üß™ Prompt Tester for FLUX API Image Generator")
        print("=" * 60)
        tester.list_prompts()
        print()
        tester.list_rotations()
        print()
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø—É—Å–∫—É
        print(f"‚ö†Ô∏è  –£–í–ê–ì–ê: –ë—É–¥–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(tester.test_prompts) * len(tester.rotation_angles)} –∑–æ–±—Ä–∞–∂–µ–Ω—å!")
        print("–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –±–∞–≥–∞—Ç–æ —á–∞—Å—É —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –±–∞–≥–∞—Ç–æ API –∫—Ä–µ–¥–∏—Ç—ñ–≤.")
        
        confirm = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            return
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        tester.test_all_prompts()
        
    except ValueError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 