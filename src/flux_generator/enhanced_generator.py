#!/usr/bin/env python3
"""
Enhanced FLUX API Image Generator
–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
"""

import os
import time
import json
import requests
from pathlib import Path
from typing import Dict, Any, Optional, List
from dotenv import load_dotenv
import base64
from .prompts import PromptConfig

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

class EnhancedFluxGenerator:
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ FLUX API –≤—ñ–¥ BFL.ai"""
    
    def __init__(self, output_subdir: str = "enhanced"):
        self.api_key = os.getenv('BFL_API_KEY')
        if not self.api_key:
            raise ValueError("BFL_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        
        # Remove quotes if present
        self.api_key = self.api_key.strip('"\'')
        
        self.base_url = "https://api.bfl.ai/v1/flux-kontext-pro"
        self.headers = {
            "x-key": self.api_key,
            "Content-Type": "application/json"
        }
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.output_dir = Path("data/output") / output_subdir
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.current_style = "realistic"
        self.current_aspect = "portrait"
        self.current_quality = "standard"
    
    def encode_image(self, image_path: str) -> str:
        """–ö–æ–¥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ base64"""
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    
    def set_style(self, style: str) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∏–ª—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"""
        if style not in PromptConfig.PROMPTS:
            available = list(PromptConfig.PROMPTS.keys())
            raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∏–ª—å: {style}. –î–æ—Å—Ç—É–ø–Ω—ñ: {available}")
        self.current_style = style
    
    def set_aspect_ratio(self, aspect: str) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω"""
        if aspect not in PromptConfig.ASPECT_RATIOS:
            available = list(PromptConfig.ASPECT_RATIOS.keys())
            raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π –∞—Å–ø–µ–∫—Ç: {aspect}. –î–æ—Å—Ç—É–ø–Ω—ñ: {available}")
        self.current_aspect = aspect
    
    def set_quality(self, quality: str) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"""
        if quality not in PromptConfig.QUALITY_SETTINGS:
            available = list(PromptConfig.QUALITY_SETTINGS.keys())
            raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∞ —è–∫—ñ—Å—Ç—å: {quality}. –î–æ—Å—Ç—É–ø–Ω—ñ: {available}")
        self.current_quality = quality
    
    def get_current_config(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        return PromptConfig.get_prompt_config(
            self.current_style,
            self.current_aspect,
            self.current_quality
        )
    
    def create_generation_request(self, seed: int, custom_prompt: Optional[str] = None) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        image_data = self.encode_image("data/input/character.jpg")
        config = self.get_current_config()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É –∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
        prompt = custom_prompt if custom_prompt else config["prompt"]
        
        request_data = {
            "prompt": prompt,
            "input_image": image_data,
            "seed": seed,
            "aspect_ratio": config["aspect_ratio"],
            "output_format": "jpeg",
            **config["quality_settings"]
        }
        
        return request_data
    
    def submit_generation(self, request_data: Dict[str, Any]) -> Optional[str]:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é"""
        try:
            response = requests.post(
                self.base_url,
                headers=self.headers,
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('polling_url')
            elif response.status_code == 429:
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ 429: –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è...")
                time.sleep(60)  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 1 —Ö–≤–∏–ª–∏–Ω–∏
                return None
            elif response.status_code == 500:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ 500: –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                return None
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP {response.status_code}: {response.text}")
                return None
                
        except requests.exceptions.Timeout:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É")
            return None
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}")
            return None
    
    def poll_generation_status(self, polling_url: str) -> Optional[Dict[str, Any]]:
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"""
        max_attempts = 60  # –ú–∞–∫—Å–∏–º—É–º 5 —Ö–≤–∏–ª–∏–Ω (60 * 5 —Å–µ–∫—É–Ω–¥)
        attempt = 0
        
        while attempt < max_attempts:
            try:
                response = requests.get(polling_url, timeout=10)
                
                if response.status_code == 200:
                    result = response.json()
                    status = result.get('status')
                    
                    if status == 'completed' or status == 'Ready':
                        return result
                    elif status == 'failed':
                        print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ–≤–¥–∞–ª–∞: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
                        return None
                    elif status == 'processing' or status == 'Pending':
                        print(f"üîÑ –û–±—Ä–æ–±–∫–∞... (—Å–ø—Ä–æ–±–∞ {attempt + 1}/{max_attempts})")
                        time.sleep(5)
                    else:
                        print(f"‚ÑπÔ∏è  –°—Ç–∞—Ç—É—Å: {status}")
                        time.sleep(5)
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É")
                    time.sleep(5)
                    
            except requests.exceptions.Timeout:
                print("‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É")
                time.sleep(5)
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
                time.sleep(5)
            
            attempt += 1
        
        print("‚è∞ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
        return None
    
    def download_image(self, image_url: str, filename: str) -> bool:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        try:
            response = requests.get(image_url, timeout=30)
            
            if response.status_code == 200:
                file_path = self.output_dir / filename
                with open(file_path, 'wb') as f:
                    f.write(response.content)
                print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
                return True
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: HTTP {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
            return False
    
    def generate_single_image(self, seed: int, custom_prompt: Optional[str] = None) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        config = self.get_current_config()
        
        print(f"\nüé® –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (seed: {seed})")
        print(f"üìù –°—Ç–∏–ª—å: {config['style_name']}")
        print(f"üìê –ê—Å–ø–µ–∫—Ç: {config['aspect_ratio']}")
        print(f"‚≠ê –Ø–∫—ñ—Å—Ç—å: {self.current_quality}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        request_data = self.create_generation_request(seed, custom_prompt)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É
        polling_url = self.submit_generation(request_data)
        if not polling_url:
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É")
            return False
        
        # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        result = self.poll_generation_status(polling_url)
        if not result:
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É")
            return False
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        result_data = result.get('result', {})
        image_url = result_data.get('sample')
        if image_url:
            filename = f"{self.current_style}_{seed}.jpg"
            return self.download_image(image_url, filename)
        else:
            print(f"‚ùå URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ")
            return False
    
    def generate_images(self, count: int = 5, custom_prompt: Optional[str] = None) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∫–∞–∑–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
        config = self.get_current_config()
        
        print(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó {count} –∑–æ–±—Ä–∞–∂–µ–Ω—å...")
        print(f"üé® –°—Ç–∏–ª—å: {config['style_name']} - {config['description']}")
        print(f"üìê –ê—Å–ø–µ–∫—Ç: {config['aspect_ratio']}")
        print(f"‚≠ê –Ø–∫—ñ—Å—Ç—å: {self.current_quality}")
        print(f"üìÅ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤: {self.output_dir.absolute()}")
        
        successful_generations = 0
        seeds_used = []
        
        for i in range(count):
            seed = 2000 + i  # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ seed –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
            seeds_used.append(seed)
            
            if self.generate_single_image(seed, custom_prompt):
                successful_generations += 1
            
            # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            if i < count - 1:
                time.sleep(2)
        
        print(f"\nüéâ === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {successful_generations}/{count}")
        print(f"üé≤ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ seed: {seeds_used}")
        print(f"üìÅ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ: {self.output_dir.absolute()}")
    
    def generate_style_comparison(self, styles: List[str] = None, count_per_style: int = 2) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤"""
        if styles is None:
            styles = ["realistic", "cinematic", "artistic", "fashion"]
        
        print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤: {', '.join(styles)}")
        print(f"üìä {count_per_style} –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å—Ç–∏–ª—å")
        
        total_generated = 0
        
        for style in styles:
            print(f"\nüé® === –°—Ç–∏–ª—å: {style.upper()} ===")
            self.set_style(style)
            
            for i in range(count_per_style):
                seed = 3000 + total_generated
                if self.generate_single_image(seed):
                    total_generated += 1
                
                if i < count_per_style - 1:
                    time.sleep(2)
        
        print(f"\nüéâ === –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")
        print(f"‚úÖ –í—Å—å–æ–≥–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {total_generated} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    
    def list_available_styles(self) -> None:
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤"""
        styles = PromptConfig.list_available_styles()
        print("üé® –î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ:")
        for style in styles:
            print(f"  ‚Ä¢ {style['key']}: {style['name']} - {style['description']}")
    
    def list_available_aspects(self) -> None:
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞—Å–ø–µ–∫—Ç—ñ–≤"""
        aspects = PromptConfig.list_available_aspects()
        print("üìê –î–æ—Å—Ç—É–ø–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏:")
        for key, value in aspects.items():
            print(f"  ‚Ä¢ {key}: {value}")
    
    def list_available_qualities(self) -> None:
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —è–∫–æ—Å—Ç–µ–π"""
        qualities = PromptConfig.list_available_qualities()
        print("‚≠ê –î–æ—Å—Ç—É–ø–Ω—ñ —è–∫–æ—Å—Ç—ñ:")
        for quality in qualities:
            print(f"  ‚Ä¢ {quality}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if not Path("data/input/character.jpg").exists():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª data/input/character.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        generator = EnhancedFluxGenerator()
        
        # –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π
        print("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:")
        generator.list_available_styles()
        print()
        generator.list_available_aspects()
        print()
        generator.list_available_qualities()
        print()
        
        # –ü—Ä–∏–∫–ª–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ç–∏–ª—è–º–∏
        print("üéØ –ü—Ä–∏–∫–ª–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:")
        
        # –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —Å—Ç–∏–ª—å
        generator.set_style("realistic")
        generator.set_aspect_ratio("portrait")
        generator.set_quality("high")
        generator.generate_images(2)
        
        # –ö—ñ–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —Å—Ç–∏–ª—å
        generator.set_style("cinematic")
        generator.set_quality("creative")
        generator.generate_images(2)
        
    except ValueError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 