#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤ FLUX Image Generator
–ü–æ–∫–∞–∑—É—î –ø—Ä–µ—Ü–∏–∑—ñ–π–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ use cases
"""

import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ src –¥–æ —à–ª—è—Ö—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from flux_generator.config.prompts import PromptConfig
from flux_generator.core.enhanced import EnhancedFluxGenerator
from flux_generator.utils.logger import setup_logger

def demo_style_information():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∏–ª—ñ"""
    print("üé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∏–ª—ñ")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ –∑ use cases
    styles = PromptConfig.list_available_styles()
    print(f"–î–æ—Å—Ç—É–ø–Ω–æ —Å—Ç–∏–ª—ñ–≤: {len(styles)}")
    print()
    
    for style in styles:
        print(f"üì∏ {style['name']} ({style['key']})")
        print(f"   –û–ø–∏—Å: {style['description']}")
        print(f"   Use Case: {style['use_case']}")
        print()

def demo_use_case_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ use case"""
    print("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ use case")
    print("=" * 60)
    
    use_cases = [
        "fashion magazine",
        "movie poster", 
        "art gallery",
        "tech company",
        "wedding photography"
    ]
    
    for use_case in use_cases:
        print(f"–ü–æ—à—É–∫ —Å—Ç–∏–ª—ñ–≤ –¥–ª—è: '{use_case}'")
        matching_styles = PromptConfig.get_prompt_by_use_case(use_case)
        
        if matching_styles:
            for style in matching_styles:
                print(f"  ‚úÖ {style['name']}: {style['description']}")
        else:
            print(f"  ‚ùå –°—Ç–∏–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print()

def demo_technical_specs_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
    print("‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏")
    print("=" * 60)
    
    specs_to_search = [
        ("lighting", "dramatic"),
        ("background", "cinematic"),
        ("quality", "RAW"),
        ("focus", "emotional")
    ]
    
    for spec_type, spec_value in specs_to_search:
        print(f"–ü–æ—à—É–∫ —Å—Ç–∏–ª—ñ–≤ –∑ {spec_type} = '{spec_value}':")
        matching_styles = PromptConfig.get_prompt_by_technical_spec(spec_type, spec_value)
        
        if matching_styles:
            for style in matching_styles:
                print(f"  ‚úÖ {style['name']}: {style['technical_specs']}")
        else:
            print(f"  ‚ùå –°—Ç–∏–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print()

def demo_enhanced_generator():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ enhanced –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ Enhanced Generator")
    print("=" * 60)
    
    try:
        generator = EnhancedFluxGenerator()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        config = generator.get_current_config()
        print(f"–ü–æ—Ç–æ—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:")
        print(f"  –°—Ç–∏–ª—å: {config['style_name']}")
        print(f"  –ê—Å–ø–µ–∫—Ç: {config['aspect_ratio']}")
        print(f"  Use Case: {config['use_case']}")
        print(f"  –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {config['technical_specs']}")
        print()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –∑–º—ñ–Ω—É —Å—Ç–∏–ª—é
        print("–ó–º—ñ–Ω–∞ —Å—Ç–∏–ª—é –Ω–∞ 'cinematic':")
        generator.set_style("cinematic")
        style_info = generator.get_style_info()
        print(f"  –ù–æ–≤–∏–π —Å—Ç–∏–ª—å: {style_info['name']}")
        print(f"  Use Case: {style_info['use_case']}")
        print()
        
        # –ü–æ—à—É–∫ —Å—Ç–∏–ª—ñ–≤ –∑–∞ use case
        print("–ü–æ—à—É–∫ fashion —Å—Ç–∏–ª—ñ–≤:")
        fashion_styles = generator.find_styles_by_use_case("fashion")
        for style in fashion_styles:
            print(f"  üì∏ {style['name']}: {style['description']}")
        print()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º: {e}")

def demo_prompt_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤"""
    print("üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤")
    print("=" * 60)
    
    styles_to_compare = ["ultra_realistic", "cinematic", "artistic"]
    
    for style in styles_to_compare:
        config = PromptConfig.get_prompt_config(style)
        print(f"üé® {config['style_name']}:")
        print(f"   Use Case: {config['use_case']}")
        print(f"   –û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è: {config['technical_specs']['lighting']}")
        print(f"   –§–æ–Ω: {config['technical_specs']['background']}")
        print(f"   –§–æ–∫—É—Å: {config['technical_specs']['focus']}")
        print(f"   –Ø–∫—ñ—Å—Ç—å: {config['technical_specs']['quality']}")
        print()

def demo_quality_settings():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —è–∫–æ—Å—Ç—ñ"""
    print("‚≠ê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —è–∫–æ—Å—Ç—ñ")
    print("=" * 60)
    
    qualities = PromptConfig.list_available_qualities()
    for quality in qualities:
        print(f"üîß {quality['key']}: {quality['description']}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üé≠ FLUX Image Generator - Enhanced Prompts Demo")
    print("=" * 80)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑ –ø—Ä–µ—Ü–∏–∑—ñ–π–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    print("—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–º–∏ use cases")
    print()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    setup_logger(level="INFO")
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
        demo_style_information()
        demo_use_case_search()
        demo_technical_specs_search()
        demo_quality_settings()
        demo_prompt_comparison()
        demo_enhanced_generator()
        
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        print()
        print("üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print("  1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ --use-case –¥–ª—è –ø–æ—à—É–∫—É —Å—Ç–∏–ª—ñ–≤ –∑–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º")
        print("  2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ --technical-spec –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏")
        print("  3. –í—Å—ñ —Å—Ç–∏–ª—ñ –º–∞—é—Ç—å —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—É —Ä–æ–∑–¥—ñ–ª—å–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å 8K")
        print("  4. –ö–æ–∂–µ–Ω —Å—Ç–∏–ª—å –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö use cases")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 