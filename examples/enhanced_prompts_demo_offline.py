#!/usr/bin/env python3
"""
–û—Ñ–ª–∞–π–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤ FLUX Image Generator
–ü–æ–∫–∞–∑—É—î –ø—Ä–µ—Ü–∏–∑—ñ–π–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ use cases –±–µ–∑ API
"""

import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ src –¥–æ —à–ª—è—Ö—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from flux_generator.config.prompts import PromptConfig

def demo_style_information():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∏–ª—ñ"""
    print("üé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∏–ª—ñ")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ –∑ use cases
    styles = PromptConfig.list_available_styles()
    print(f"–î–æ—Å—Ç—É–ø–Ω–æ —Å—Ç–∏–ª—ñ–≤: {len(styles)}")
    print()
    
    for style in styles:
        print(f"üì∏ {style['name']} ({style['key']})")
        print(f"   –û–ø–∏—Å: {style['description']}")
        print(f"   Use Case: {style['use_case']}")
        print()

def demo_use_case_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ use case"""
    print("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ use case")
    print("=" * 60)
    
    use_cases = [
        "fashion magazine",
        "movie poster", 
        "art gallery",
        "tech company",
        "wedding photography",
        "fantasy book",
        "sci-fi entertainment",
        "vintage advertising"
    ]
    
    for use_case in use_cases:
        print(f"–ü–æ—à—É–∫ —Å—Ç–∏–ª—ñ–≤ –¥–ª—è: '{use_case}'")
        matching_styles = PromptConfig.get_prompt_by_use_case(use_case)
        
        if matching_styles:
            for style in matching_styles:
                print(f"  ‚úÖ {style['name']}: {style['description']}")
        else:
            print(f"  ‚ùå –°—Ç–∏–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print()

def demo_technical_specs_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
    print("‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏")
    print("=" * 60)
    
    specs_to_search = [
        ("lighting", "dramatic"),
        ("background", "cinematic"),
        ("quality", "RAW"),
        ("focus", "emotional"),
        ("lighting", "ethereal"),
        ("background", "mystical"),
        ("quality", "masterpiece")
    ]
    
    for spec_type, spec_value in specs_to_search:
        print(f"–ü–æ—à—É–∫ —Å—Ç–∏–ª—ñ–≤ –∑ {spec_type} = '{spec_value}':")
        matching_styles = PromptConfig.get_prompt_by_technical_spec(spec_type, spec_value)
        
        if matching_styles:
            for style in matching_styles:
                print(f"  ‚úÖ {style['name']}: {style['technical_specs']}")
        else:
            print(f"  ‚ùå –°—Ç–∏–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print()

def demo_prompt_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤"""
    print("üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤")
    print("=" * 60)
    
    styles_to_compare = ["ultra_realistic", "cinematic", "artistic", "fantasy", "sci_fi"]
    
    for style in styles_to_compare:
        config = PromptConfig.get_prompt_config(style)
        print(f"üé® {config['style_name']}:")
        print(f"   Use Case: {config['use_case']}")
        print(f"   –û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è: {config['technical_specs']['lighting']}")
        print(f"   –§–æ–Ω: {config['technical_specs']['background']}")
        print(f"   –§–æ–∫—É—Å: {config['technical_specs']['focus']}")
        print(f"   –Ø–∫—ñ—Å—Ç—å: {config['technical_specs']['quality']}")
        print(f"   –ü—Ä–æ–º–ø—Ç: {config['prompt'][:100]}...")
        print()

def demo_quality_settings():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —è–∫–æ—Å—Ç—ñ"""
    print("‚≠ê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —è–∫–æ—Å—Ç—ñ")
    print("=" * 60)
    
    qualities = PromptConfig.list_available_qualities()
    for quality in qualities:
        print(f"üîß {quality['key']}: {quality['description']}")

def demo_style_details():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç–∏–ª—ñ"""
    print("üî¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∏–ª—ñ")
    print("=" * 60)
    
    styles_to_show = ["ultra_realistic", "cinematic", "fantasy", "sci_fi", "noir"]
    
    for style in styles_to_show:
        try:
            info = PromptConfig.get_style_info(style)
            print(f"üì∏ {info['name']} ({style})")
            print(f"   –û–ø–∏—Å: {info['description']}")
            print(f"   Use Case: {info['use_case']}")
            print(f"   –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
            for key, value in info['technical_specs'].items():
                print(f"     {key}: {value}")
            print(f"   –ü–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç: {info['prompt']}")
            print()
        except ValueError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è —Å—Ç–∏–ª—é {style}: {e}")

def demo_cli_commands():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è CLI –∫–æ–º–∞–Ω–¥"""
    print("üíª –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è CLI –∫–æ–º–∞–Ω–¥")
    print("=" * 60)
    
    commands = [
        "python -m flux_generator enhanced --list-styles",
        "python -m flux_generator enhanced --use-case 'fashion magazine'",
        "python -m flux_generator enhanced --technical-spec 'lighting:dramatic'",
        "python -m flux_generator enhanced --style-info 'cinematic'",
        "python -m flux_generator enhanced --style 'fantasy' --count 3",
        "python -m flux_generator enhanced --compare --count 2"
    ]
    
    for i, command in enumerate(commands, 1):
        print(f"{i}. {command}")
    print()

def demo_programmatic_api():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ API"""
    print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ API")
    print("=" * 60)
    
    print("1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å—Ç–∏–ª—é:")
    config = PromptConfig.get_prompt_config("cinematic")
    print(f"   –°—Ç–∏–ª—å: {config['style_name']}")
    print(f"   Use Case: {config['use_case']}")
    print(f"   –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {config['technical_specs']}")
    print()
    
    print("2. –ü–æ—à—É–∫ —Å—Ç–∏–ª—ñ–≤ –∑–∞ use case:")
    fashion_styles = PromptConfig.get_prompt_by_use_case("fashion")
    for style in fashion_styles:
        print(f"   {style['name']}: {style['use_case']}")
    print()
    
    print("3. –ü–æ—à—É–∫ –∑–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:")
    dramatic_styles = PromptConfig.get_prompt_by_technical_spec("lighting", "dramatic")
    for style in dramatic_styles:
        print(f"   {style['name']}: {style['technical_specs']}")
    print()

def demo_enhancement_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ/–ø—ñ—Å–ª—è –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è"""
    print("üìà –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ/–ø—ñ—Å–ª—è –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è")
    print("=" * 60)
    
    print("–î–û –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è:")
    print("  ‚ùå –í—Å—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ –Ω–∞ 'portrait of a woman'")
    print("  ‚ùå –ë–∞–∑–æ–≤—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
    print("  ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ use cases")
    print("  ‚ùå 8 —Å—Ç–∏–ª—ñ–≤")
    print("  ‚ùå –ü—Ä–æ—Å—Ç—ñ –ø—Ä–æ–º–ø—Ç–∏")
    print()
    
    print("–ü–Ü–°–õ–Ø –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è:")
    print("  ‚úÖ –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –æ–±'—î–∫—Ç—ñ–≤ —Ç–∞ —Å—Ç–∏–ª—ñ–≤")
    print("  ‚úÖ –ü—Ä–µ—Ü–∏–∑—ñ–π–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (8K, —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è)")
    print("  ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ use cases –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç–∏–ª—é")
    print("  ‚úÖ 12 —Å—Ç–∏–ª—ñ–≤ –∑ –Ω–æ–≤–∏–º–∏: Fantasy, Sci-Fi, Film Noir, Impressionist")
    print("  ‚úÖ –î–µ—Ç–∞–ª—å–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è–º–∏")
    print("  ‚úÖ –ü–æ—à—É–∫ –∑–∞ use case —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏")
    print("  ‚úÖ –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —è–∫—ñ—Å–Ω—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏")
    print()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üé≠ FLUX Image Generator - Enhanced Prompts Demo (Offline)")
    print("=" * 80)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑ –ø—Ä–µ—Ü–∏–∑—ñ–π–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    print("—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–º–∏ use cases (–±–µ–∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API)")
    print()
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
        demo_style_information()
        demo_use_case_search()
        demo_technical_specs_search()
        demo_quality_settings()
        demo_prompt_comparison()
        demo_style_details()
        demo_cli_commands()
        demo_programmatic_api()
        demo_enhancement_comparison()
        
        print("‚úÖ –û—Ñ–ª–∞–π–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        print()
        print("üí° –ö–ª—é—á–æ–≤—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏:")
        print("  1. –ü—Ä–µ—Ü–∏–∑—ñ–π–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—ó —è–∫–æ—Å—Ç—ñ")
        print("  2. –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ use cases –¥–ª—è —Ü—ñ–ª–µ—Å–ø—Ä—è–º–æ–≤–∞–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
        print("  3. –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å —Å—Ç–∏–ª—ñ–≤ (12 –∑–∞–º—ñ—Å—Ç—å 8)")
        print("  4. –ó—Ä—É—á–Ω—ñ CLI –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
        print("  5. –ü—Ä–æ–≥—Ä–∞–º–Ω–∏–π API –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó")
        print("  6. –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —è–∫—ñ—Å–Ω—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏ (8K –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–∏–ª—ñ–≤)")
        print()
        print("üöÄ –ì–æ—Ç–æ–≤–æ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º API!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 