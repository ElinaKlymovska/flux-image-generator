#!/usr/bin/env python3
"""
Prompt Tester Main - Automated Testing of Multiple Prompts with Rotation
–ì–æ–ª–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è–º
"""

import sys
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from flux_generator import PromptTester

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    print("\nüß™ Prompt Tester for FLUX API Image Generator")
    print("=" * 60)
    print("1. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–º–ø—Ç–∏")
    print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è")
    print("3. –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –æ–¥–∏–Ω –ø—Ä–æ–º–ø—Ç")
    print("4. –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–º–ø—Ç–∏ (105 –∑–æ–±—Ä–∞–∂–µ–Ω—å)")
    print("5. –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏")
    print("6. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("7. –í–∏—Ö—ñ–¥")
    print("=" * 60)

def show_prompts(tester):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–º–ø—Ç–∏"""
    print("\nüìù –í—Å—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    tester.list_prompts()

def show_rotations(tester):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è"""
    print("\nüîÑ –ö—É—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è:")
    tester.list_rotations()

def test_single_prompt(tester):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É"""
    print("\nüéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É")
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏
    tester.list_prompts()
    
    # –í–∏–±—ñ—Ä –ø—Ä–æ–º–ø—Ç—É
    try:
        choice = int(input("\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–æ–º–ø—Ç—É (1-15): ")) - 1
        if choice < 0 or choice >= len(tester.test_prompts):
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –ø—Ä–æ–º–ø—Ç—É")
            return
    except ValueError:
        print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")
        return
    
    prompt = tester.test_prompts[choice]
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    print(f"\nüé® –û–±—Ä–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç: {prompt['name']}")
    print(f"üìù –û–ø–∏—Å: {prompt['description']}")
    print(f"üîÑ –ë—É–¥–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(tester.rotation_angles)} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    
    confirm = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        return
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    tester.test_prompt(prompt)

def test_all_prompts(tester):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤"""
    total_images = len(tester.test_prompts) * len(tester.rotation_angles)
    
    print(f"\n‚ö†Ô∏è  –£–í–ê–ì–ê: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤")
    print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–º–ø—Ç—ñ–≤: {len(tester.test_prompts)}")
    print(f"üîÑ –ö—É—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è: {len(tester.rotation_angles)}")
    print(f"üì∏ –í—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {total_images}")
    print(f"‚è±Ô∏è  –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —á–∞—Å: {total_images * 2} —Ö–≤–∏–ª–∏–Ω")
    print(f"üí∞ API –∫—Ä–µ–¥–∏—Ç–∏: {total_images} –∑–∞–ø–∏—Ç—ñ–≤")
    
    confirm = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    tester.test_all_prompts()

def test_selected_prompts(tester):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤"""
    print("\nüéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤")
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏
    tester.list_prompts()
    
    # –í–∏–±—ñ—Ä –ø—Ä–æ–º–ø—Ç—ñ–≤
    selection = input("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,3,5): ").strip()
    
    try:
        indices = [int(x.strip()) - 1 for x in selection.split(",")]
        selected_prompts = [tester.test_prompts[i] for i in indices if 0 <= i < len(tester.test_prompts)]
        
        if not selected_prompts:
            print("‚ùå –ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É")
            return
        
        total_images = len(selected_prompts) * len(tester.rotation_angles)
        
        print(f"\nüìã –û–±—Ä–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏:")
        for prompt in selected_prompts:
            print(f"  ‚Ä¢ {prompt['name']}: {prompt['description']}")
        
        print(f"\nüìä –í—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {total_images}")
        
        confirm = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤
        for i, prompt in enumerate(selected_prompts):
            print(f"\n{'='*60}")
            print(f"üìã –ü—Ä–æ–º–ø—Ç {i+1}/{len(selected_prompts)}: {prompt['name']}")
            print(f"{'='*60}")
            
            tester.test_prompt(prompt)
            
            # –ü–∞—É–∑–∞ –º—ñ–∂ –ø—Ä–æ–º–ø—Ç–∞–º–∏
            if i < len(selected_prompts) - 1:
                print(f"\n‚è≥ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥...")
                import time
                time.sleep(10)
        
        print(f"\nüéâ === –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û ===")
        
    except ValueError:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è")

def show_statistics(tester):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
    print("=" * 40)
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–º–ø—Ç–∏
    print(f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–º–ø—Ç—ñ–≤: {len(tester.test_prompts)}")
    print(f"üîÑ –ö—É—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è: {len(tester.rotation_angles)}")
    print(f"üì∏ –ó–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ –ø—Ä–æ–º–ø—Ç: {len(tester.rotation_angles)}")
    print(f"üìä –í—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(tester.test_prompts) * len(tester.rotation_angles)}")
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞–ø–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç—ñ–≤
    datasets_dir = Path(__file__).parent.parent / "data/output/datasets"
    if datasets_dir.exists():
        datasets = list(datasets_dir.glob("*"))
        print(f"üìÅ –Ü—Å–Ω—É—é—á–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç—ñ–≤: {len(datasets)}")
        
        if datasets:
            print("\nüìã –û—Å—Ç–∞–Ω–Ω—ñ –¥–∞—Ç–∞—Å–µ—Ç–∏:")
            for dataset in sorted(datasets, key=lambda x: x.stat().st_mtime, reverse=True)[:5]:
                print(f"  ‚Ä¢ {dataset.name}")
    else:
        print("üìÅ –î–∞—Ç–∞—Å–µ—Ç–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ Prompt Tester - Starting...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        input_image = Path(__file__).parent.parent / "data/input/character.jpg"
        print(f"üîç Checking input image: {input_image}")
        
        if not input_image.exists():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª data/input/character.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print("‚úÖ Input image found")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–µ—Ä–∞
        print("üîß Creating prompt tester...")
        tester = PromptTester()
        print("‚úÖ Prompt tester created successfully")
        
        # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
        while True:
            show_menu()
            choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-7): ").strip()
            
            if choice == "1":
                show_prompts(tester)
            
            elif choice == "2":
                show_rotations(tester)
            
            elif choice == "3":
                test_single_prompt(tester)
            
            elif choice == "4":
                test_all_prompts(tester)
            
            elif choice == "5":
                test_selected_prompts(tester)
            
            elif choice == "6":
                show_statistics(tester)
            
            elif choice == "7":
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
        
    except ValueError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 