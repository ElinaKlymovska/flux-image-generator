#!/usr/bin/env python3
"""
üé® SenteticData - –û–±'—î–¥–Ω–∞–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ FLUX API
–ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—Ä–æ–µ–∫—Ç—É
"""

import sys
import os
import argparse
from pathlib import Path
from typing import List, Optional

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from flux_generator import EnhancedFluxGenerator, FluxImageGenerator
from flux_generator.core.rotation import CharacterRotationGenerator
from flux_generator.utils.logger import get_logger

logger = get_logger(__name__)


class SenteticDataGenerator:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ –ø—Ä–æ–µ–∫—Ç—É"""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.enhanced_generator = None
        self.rotation_generator = None
        self.flux_generator = None
        
    def initialize_generators(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤"""
        try:
            self.enhanced_generator = EnhancedFluxGenerator()
            self.rotation_generator = CharacterRotationGenerator()
            self.flux_generator = FluxImageGenerator()
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤: {e}")
            return False
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API"""
        if not self.enhanced_generator:
            return False
        return self.enhanced_generator.test_connection()
    
    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        print("\nüé® SenteticData - –û–±'—î–¥–Ω–∞–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print("=" * 60)
        print("1. üéØ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –æ–¥–Ω–∏–º —Å—Ç–∏–ª–µ–º")
        print("2. üîÑ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤")
        print("3. ‚úçÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç")
        print("4. üåÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        print("5. üì∏ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞—Ü—ñ–π –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤")
        print("6. üîß –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å (Adetailer)")
        print("7. ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        print("8. üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–∏–ª—ñ")
        print("9. üöÄ –®–≤–∏–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è (–≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)")
        print("0. üëã –í–∏—Ö—ñ–¥")
        print("=" * 60)
    
    def single_style_generation(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –æ–¥–Ω–∏–º —Å—Ç–∏–ª–µ–º"""
        print("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –æ–¥–Ω–∏–º —Å—Ç–∏–ª–µ–º")
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ
        self.enhanced_generator.list_available_styles()
        
        # –í–∏–±—ñ—Ä —Å—Ç–∏–ª—é
        style = input("\n–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å (–∞–±–æ Enter –¥–ª—è realistic): ").strip().lower()
        if not style:
            style = "realistic"
        
        try:
            self.enhanced_generator.set_style(style)
        except ValueError as e:
            print(f"‚ùå {e}")
            return
        
        # –í–∏–±—ñ—Ä –∞—Å–ø–µ–∫—Ç—É
        self.enhanced_generator.list_available_aspects()
        aspect = input("–í–∏–±–µ—Ä—ñ—Ç—å –∞—Å–ø–µ–∫—Ç (–∞–±–æ Enter –¥–ª—è portrait): ").strip().lower()
        if not aspect:
            aspect = "portrait"
        
        try:
            self.enhanced_generator.set_aspect_ratio(aspect)
        except ValueError as e:
            print(f"‚ùå {e}")
            return
        
        # –í–∏–±—ñ—Ä —è–∫–æ—Å—Ç—ñ
        self.enhanced_generator.list_available_qualities()
        quality = input("–í–∏–±–µ—Ä—ñ—Ç—å —è–∫—ñ—Å—Ç—å (–∞–±–æ Enter –¥–ª—è standard): ").strip().lower()
        if not quality:
            quality = "standard"
        
        try:
            self.enhanced_generator.set_quality(quality)
        except ValueError as e:
            print(f"‚ùå {e}")
            return
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å
        try:
            count = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å (–∞–±–æ Enter –¥–ª—è 3): ") or "3")
        except ValueError:
            count = 3
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó...")
        self.enhanced_generator.generate_images(count)
    
    def style_comparison(self):
        """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤"""
        print("\nüîÑ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤")
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∏–ª—ñ
        self.enhanced_generator.list_available_styles()
        
        # –í–∏–±—ñ—Ä —Å—Ç–∏–ª—ñ–≤
        styles_input = input("\n–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É (–∞–±–æ Enter –¥–ª—è realistic,cinematic,artistic): ").strip()
        if not styles_input:
            styles = ["realistic", "cinematic", "artistic"]
        else:
            styles = [s.strip().lower() for s in styles_input.split(",")]
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ —Å—Ç–∏–ª—å
        try:
            count_per_style = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ —Å—Ç–∏–ª—å (–∞–±–æ Enter –¥–ª—è 2): ") or "2")
        except ValueError:
            count_per_style = 2
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤...")
        self.enhanced_generator.generate_style_comparison(styles, count_per_style)
    
    def custom_prompt_generation(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        print("\n‚úçÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç")
        
        # –í–∏–±—ñ—Ä —Å—Ç–∏–ª—é —è–∫ –±–∞–∑–∏
        self.enhanced_generator.list_available_styles()
        style = input("\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∑–æ–≤–∏–π —Å—Ç–∏–ª—å (–∞–±–æ Enter –¥–ª—è realistic): ").strip().lower()
        if not style:
            style = "realistic"
        
        try:
            self.enhanced_generator.set_style(style)
        except ValueError as e:
            print(f"‚ùå {e}")
            return
        
        # –ö–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        custom_prompt = input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç: ").strip()
        if not custom_prompt:
            print("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
            return
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å
        try:
            count = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å (–∞–±–æ Enter –¥–ª—è 2): ") or "2")
        except ValueError:
            count = 2
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º...")
        self.enhanced_generator.generate_images(count, custom_prompt)
    
    def character_rotation_generation(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        print("\nüåÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        
        print("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ—Ç–∞—Ü—ñ—ó:")
        print("1. –ë–∞–∑–æ–≤—ñ –∫—É—Ç–∏ (front, left, back, right)")
        print("2. 360¬∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å")
        print("3. –ö–∞—Å—Ç–æ–º–Ω—ñ –∫—É—Ç–∏")
        
        choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-3): ").strip()
        
        if choice == "1":
            angles = ["front", "left", "back", "right"]
            steps = None
        elif choice == "2":
            try:
                steps = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ –¥–ª—è 360¬∞ (–∞–±–æ Enter –¥–ª—è 8): ") or "8")
                angles = None
            except ValueError:
                steps = 8
                angles = None
        elif choice == "3":
            angles_input = input("–í–≤–µ–¥—ñ—Ç—å –∫—É—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10,45,90,180): ").strip()
            angles = [angle.strip() for angle in angles_input.split(",")]
            steps = None
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
            return
        
        # –°—Ç–∏–ª—å
        style = input("–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å (–∞–±–æ Enter –¥–ª—è ultra_realistic): ").strip()
        if not style:
            style = "ultra_realistic"
        
        # –ö–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        custom_prompt = input("–ö–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç (–∞–±–æ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É): ").strip()
        if not custom_prompt:
            custom_prompt = None
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–æ—Ç–∞—Ü—ñ—ó...")
        
        if steps:
            results = self.rotation_generator.generate_360_degree_sequence(
                steps=steps,
                style=style,
                start_seed=1001,
                custom_prompt=custom_prompt
            )
        else:
            results = self.rotation_generator.generate_full_rotation(
                angles=angles,
                style=style,
                start_seed=1001,
                custom_prompt=custom_prompt
            )
        
        successful = sum(1 for r in results.values() if r is not None) if isinstance(results, dict) else sum(1 for r in results if r is not None)
        total = len(results)
        print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {successful}/{total} –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ä–æ—Ç–∞—Ü—ñ—ó")
    
    def portrait_variations_generation(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞—Ü—ñ–π –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤"""
        print("\nüì∏ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞—Ü—ñ–π –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤")
        
        print("–¶–µ –∑–≥–µ–Ω–µ—Ä—É—î –ø–æ—Ä—Ç—Ä–µ—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–∏–ª—ñ–≤ —Ç–∞ —è–∫–æ—Å—Ç–µ–π.")
        confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
        
        if confirm not in ['y', 'yes']:
            print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
        
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∞—Ä—ñ–∞—Ü—ñ–π –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤...")
        
        summary = self.enhanced_generator.generate_all_variations_summary(
            count_per_variation=1,
            start_seed=1000,
            custom_prompt=None,
            include_aspects=["portrait"]
        )
        
        stats = summary["statistics"]
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
        print(f"  - –í—Å—å–æ–≥–æ –≤–∞—Ä—ñ–∞—Ü—ñ–π: {stats['total_variations']}")
        print(f"  - –£—Å–ø—ñ—à–Ω–∏—Ö: {stats['successful_variations']}")
        print(f"  - –í—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {stats['total_images']}")
        print(f"  - –£—Å–ø—ñ—à–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å: {stats['successful_images']}")
    
    def process_images_adetailer(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ Adetailer"""
        print("\nüîß –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å (Adetailer)")
        
        print("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–±—Ä–æ–±–∫–∏:")
        print("1. –í—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ data/output")
        print("2. –¢—ñ–ª—å–∫–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        print("3. –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ—Ç–∞—Ü—ñ—ó")
        print("4. –ü–µ—Ä—à—ñ 6 –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        
        choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-4): ").strip()
        
        if choice == "1":
            self._process_all_images()
        elif choice == "2":
            self._process_original_images()
        elif choice == "3":
            self._process_rotation_images()
        elif choice == "4":
            self._process_six_images()
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
    
    def _process_all_images(self):
        """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
        input_dir = Path("data/output")
        image_files = list(input_dir.rglob("*.jpg")) + list(input_dir.rglob("*.png"))
        
        if not image_files:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤ data/output")
            return
        
        print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(image_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        self._process_images_with_flux(image_files, "flux_enhanced")
    
    def _process_original_images(self):
        """–û–±—Ä–æ–±–∫–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
        original_dirs = ["data/output/portrait_variations", "data/output/rotation_output"]
        image_files = []
        
        for dir_path in original_dirs:
            dir_obj = Path(dir_path)
            if dir_obj.exists():
                files = list(dir_obj.glob("*.jpg")) + list(dir_obj.glob("*.png"))
                original_files = [f for f in files if not f.name.startswith("enhanced_")]
                image_files.extend(original_files)
        
        if not image_files:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å")
            return
        
        print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(image_files)} –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        self._process_images_with_flux(image_files, "original_enhanced")
    
    def _process_rotation_images(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ä–æ—Ç–∞—Ü—ñ—ó"""
        input_dir = Path("data/output/rotation_output")
        image_files = list(input_dir.glob("*.jpg")) + list(input_dir.glob("*.png"))
        
        if not image_files:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ä–æ—Ç–∞—Ü—ñ—ó")
            return
        
        print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(image_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ä–æ—Ç–∞—Ü—ñ—ó")
        self._process_images_with_flux(image_files, "rotation_enhanced")
    
    def _process_six_images(self):
        """–û–±—Ä–æ–±–∫–∞ –ø–µ—Ä—à–∏—Ö 6 –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
        input_dir = Path("data/output/woman")
        image_files = list(input_dir.glob("*.jpg")) + list(input_dir.glob("*.png"))
        image_files = sorted(image_files)[:6]
        
        if not image_files:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å")
            return
        
        print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(image_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        self._process_images_with_flux(image_files, "six_enhanced")
    
    def _process_images_with_flux(self, image_files: List[Path], output_subdir: str):
        """–û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ FLUX API"""
        output_dir = Path("data/output") / output_subdir
        output_dir.mkdir(parents=True, exist_ok=True)
        
        enhanced_prompts = [
            "beautiful face, detailed eyes, perfect skin, high quality, ultra realistic, sharp focus",
            "portrait with enhanced facial features, detailed eyes, flawless skin, professional photography",
            "high resolution face, detailed features, perfect skin texture, studio lighting",
            "close-up portrait, detailed eyes, smooth skin, high quality, professional"
        ]
        
        print(f"\nüöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ {len(image_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å...")
        processed_count = 0
        
        for i, image_path in enumerate(image_files, 1):
            print(f"\nüì∏ –û–±—Ä–æ–±–∫–∞ {i}/{len(image_files)}: {image_path.name}")
            
            try:
                prompt_index = (i - 1) % len(enhanced_prompts)
                enhanced_prompt = enhanced_prompts[prompt_index]
                
                output_path = self.flux_generator.generate_single_image(
                    prompt=enhanced_prompt,
                    seed=1000 + i,
                    aspect_ratio="2:3",
                    output_format="jpeg"
                )
                
                if output_path:
                    enhanced_filename = f"enhanced_{image_path.stem}_flux{image_path.suffix}"
                    enhanced_path = output_dir / enhanced_filename
                    
                    import shutil
                    shutil.copy2(output_path, enhanced_path)
                    
                    processed_count += 1
                    print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {enhanced_filename}")
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {image_path.name}")
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {image_path.name}: {e}")
        
        print(f"\nüéâ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ {processed_count}/{len(image_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print(f"üìÅ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {output_dir}")
    
    def settings_menu(self):
        """–ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        while True:
            print("\n‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            print("1. –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∏–ª—å")
            print("2. –ó–º—ñ–Ω–∏—Ç–∏ –∞—Å–ø–µ–∫—Ç")
            print("3. –ó–º—ñ–Ω–∏—Ç–∏ —è–∫—ñ—Å—Ç—å")
            print("4. –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            print("5. –ù–∞–∑–∞–¥")
            
            choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ").strip()
            
            if choice == "1":
                self.enhanced_generator.list_available_styles()
                style = input("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∏–ª—å: ").strip().lower()
                try:
                    self.enhanced_generator.set_style(style)
                    print(f"‚úÖ –°—Ç–∏–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {style}")
                except ValueError as e:
                    print(f"‚ùå {e}")
            
            elif choice == "2":
                self.enhanced_generator.list_available_aspects()
                aspect = input("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –∞—Å–ø–µ–∫—Ç: ").strip().lower()
                try:
                    self.enhanced_generator.set_aspect_ratio(aspect)
                    print(f"‚úÖ –ê—Å–ø–µ–∫—Ç –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {aspect}")
                except ValueError as e:
                    print(f"‚ùå {e}")
            
            elif choice == "3":
                self.enhanced_generator.list_available_qualities()
                quality = input("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —è–∫—ñ—Å—Ç—å: ").strip().lower()
                try:
                    self.enhanced_generator.set_quality(quality)
                    print(f"‚úÖ –Ø–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {quality}")
                except ValueError as e:
                    print(f"‚ùå {e}")
            
            elif choice == "4":
                config = self.enhanced_generator.get_current_config()
                print(f"\nüìã –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
                print(f"üé® –°—Ç–∏–ª—å: {config['style_name']}")
                print(f"üìê –ê—Å–ø–µ–∫—Ç: {config['aspect_ratio']}")
                print(f"‚≠ê –Ø–∫—ñ—Å—Ç—å: {self.enhanced_generator.current_quality}")
                print(f"üìù –ü—Ä–æ–º–ø—Ç: {config['prompt'][:100]}...")
            
            elif choice == "5":
                break
            
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
    
    def show_styles_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∏–ª—ñ"""
        print("\nüìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–∏–ª—ñ")
        self.enhanced_generator.list_available_styles()
        print("\nüìê –î–æ—Å—Ç—É–ø–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏:")
        self.enhanced_generator.list_available_aspects()
        print("\n‚≠ê –î–æ—Å—Ç—É–ø–Ω—ñ —è–∫–æ—Å—Ç—ñ:")
        self.enhanced_generator.list_available_qualities()
    
    def quick_generation(self):
        """–®–≤–∏–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è (–≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)"""
        print("\nüöÄ –®–≤–∏–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è (–≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)")
        print("–¶–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –≤—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:")
        print("1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤ (–≤—Å—ñ —Å—Ç–∏–ª—ñ)")
        print("2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        print("3. –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        
        confirm = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
        if confirm not in ['y', 'yes']:
            print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
        
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —à–≤–∏–¥–∫–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó...")
        
        # 1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤
        print("\nüì∏ –ö—Ä–æ–∫ 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤...")
        try:
            summary = self.enhanced_generator.generate_all_variations_summary(
                count_per_variation=1,
                start_seed=1000,
                custom_prompt=None,
                include_aspects=["portrait"]
            )
            print(f"‚úÖ –ü–æ—Ä—Ç—Ä–µ—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤: {e}")
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ—ó
        print("\nüåÄ –ö—Ä–æ–∫ 2: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ—ó...")
        try:
            results = self.rotation_generator.generate_360_degree_sequence(
                steps=8,
                style="ultra_realistic",
                start_seed=1001
            )
            print(f"‚úÖ –†–æ—Ç–∞—Ü—ñ—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–æ—Ç–∞—Ü—ñ—ó: {e}")
        
        # 3. –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
        print("\nüîß –ö—Ä–æ–∫ 3: –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å...")
        try:
            input_dir = Path("data/output")
            image_files = list(input_dir.rglob("*.jpg")) + list(input_dir.rglob("*.png"))
            if image_files:
                self._process_images_with_flux(image_files[:10], "quick_enhanced")  # –û–±—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä—à—ñ 10
                print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ")
            else:
                print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {e}")
        
        print(f"\nüéâ –®–≤–∏–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(description="üé® SenteticData - –û–±'—î–¥–Ω–∞–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    parser.add_argument("--quick", action="store_true", help="–®–≤–∏–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è (–≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)")
    parser.add_argument("--style", help="–°—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
    parser.add_argument("--count", type=int, default=3, help="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    parser.add_argument("--rotation", action="store_true", help="–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ—ó")
    parser.add_argument("--process", action="store_true", help="–û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    
    args = parser.parse_args()
    
    print("üöÄ SenteticData - –û–±'—î–¥–Ω–∞–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        input_image = Path("data/input/character.jpg")
        if not input_image.exists():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª data/input/character.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return 1
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        generator = SenteticDataGenerator()
        
        if not generator.initialize_generators():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤")
            return 1
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
        if not generator.test_connection():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API")
            return 1
        
        print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ API —É—Å–ø—ñ—à–Ω–µ")
        
        # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        if args.quick:
            generator.quick_generation()
            return 0
        
        if args.style:
            generator.enhanced_generator.set_style(args.style)
            generator.enhanced_generator.generate_images(args.count)
            return 0
        
        if args.rotation:
            generator.character_rotation_generation()
            return 0
        
        if args.process:
            generator.process_images_adetailer()
            return 0
        
        # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
        while True:
            generator.show_main_menu()
            choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-9): ").strip()
            
            if choice == "1":
                generator.single_style_generation()
            elif choice == "2":
                generator.style_comparison()
            elif choice == "3":
                generator.custom_prompt_generation()
            elif choice == "4":
                generator.character_rotation_generation()
            elif choice == "5":
                generator.portrait_variations_generation()
            elif choice == "6":
                generator.process_images_adetailer()
            elif choice == "7":
                generator.settings_menu()
            elif choice == "8":
                generator.show_styles_info()
            elif choice == "9":
                generator.quick_generation()
            elif choice == "0":
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
        
        return 0
        
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return 0
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"Main error: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 